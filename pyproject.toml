[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "modelscope-mcp"
version = "1.0.0"
description = "ModelScope 数据集即时查询 MCP Server"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "ModelScope MCP Team", email = "team@example.com"}
]
keywords = ["mcp", "modelscope", "dataset", "nlp", "ai", "machine-learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "mcp>=1.0.0",
    "datasets>=2.14.0",
    "modelscope>=1.9.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "aiosqlite>=0.19.0",
    "redis>=4.5.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "uvloop>=0.17.0; sys_platform != 'win32'",
    "asyncio-throttle>=1.0.0",
    "aiofiles>=23.0.0",
    "httpx>=0.24.0",
    "tenacity>=8.2.0",
    "structlog>=23.0.0",
    "orjson>=3.9.0",
    "xxhash>=3.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
    "notebook>=6.5.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
    "types-redis>=4.0.0",
    "types-requests>=2.28.0",
    "types-setuptools>=65.0.0",
    "pdb++>=0.10.0",
    "icecream>=2.1.0",
    "rich>=13.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pip-tools>=6.12.0",
    "pipdeptree>=2.7.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "sphinx-autodoc-typehints>=1.23.0",
    "sphinx-click>=4.4.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
]
performance = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
    "pytest-benchmark>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/modelscope-mcp"
Documentation = "https://modelscope-mcp.readthedocs.io"
Repository = "https://github.com/your-org/modelscope-mcp.git"
"Bug Tracker" = "https://github.com/your-org/modelscope-mcp/issues"
Changelog = "https://github.com/your-org/modelscope-mcp/blob/main/CHANGELOG.md"

[project.scripts]
modelscope-mcp = "src.modelscope_mcp.server:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["modelscope_mcp*"]

[tool.setuptools.package-data]
"modelscope_mcp" = ["py.typed"]

# Black 配置
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

# isort 配置
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
skip_glob = ["*/__pycache__/*", "*/.*"]
known_first_party = ["modelscope_mcp"]
known_third_party = [
    "mcp",
    "datasets",
    "modelscope",
    "sqlalchemy",
    "redis",
    "pydantic",
    "click",
    "pytest",
    "structlog",
]

# MyPy 配置
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "datasets.*",
    "modelscope.*",
    "redis.*",
    "xxhash.*",
    "orjson.*",
    "uvloop.*",
    "asyncio_throttle.*",
    "tenacity.*",
]
ignore_missing_imports = true

# Pytest 配置
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: 单元测试",
    "integration: 集成测试",
    "slow: 慢速测试",
    "external: 需要外部依赖的测试",
    "redis: 需要 Redis 的测试",
    "database: 需要数据库的测试",
    "network: 需要网络连接的测试",
    "performance: 性能测试",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

# Coverage 配置
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "setup.py",
    "conftest.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

# Bandit 安全检查配置
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# Flake8 配置（在 setup.cfg 或 .flake8 文件中）
# 这里仅作为参考，实际配置需要在 .flake8 文件中
# [flake8]
# max-line-length = 88
# extend-ignore = E203, W503, E501
# exclude = .git,__pycache__,build,dist,.eggs,*.egg-info,.venv,.tox
# per-file-ignores = __init__.py:F401
# max-complexity = 10